@using System.Reflection;
@using System.ComponentModel;
@using dll = Calculator.DLL
@using System.Threading.Tasks

<div class="container">
    @if (StringSet is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-2"><span style="font-weight:bold;">Note</span></div>
            <div class="col-2"><span style="font-weight:bold;">Scale</span></div>
            <div class="col-2"><span class="fas fa-circle-notch">Type</span></div>
            <div class="col-3"><span style="font-weight:bold;">Material</span></div>
            <div class="col-3"><span style="font-weight:bold;">Tension</span></div>
        </div>
        foreach (var gString in StringSet.StringCollection)
        {
            <div class="row">
                <div class="col-2">
                    <select id="_stringnoteselector" class="custom-select" value="@gString.Note.FullName" @onchange="args => SelectNote(gString.Position, args)">
                        @foreach (var note in Notes)
                        {
                            <option value=@note.FullName>@note.FullName</option>
                        }
                    </select>
                </div>
                <div class="col-2"><label for="@gString.LengthDisplay">@gString.LengthDisplay</label></div>
                <div class="col-2">
                    <select id="_prefixdiameterselector" class="custom-select" value="@gString.UW.FullName" @onchange="args => SelectPrefixDiameter(gString.Position, args)">
                        @foreach (var pd in PrefixDiameters)
                        {
                            <option value=@pd>@pd</option>
                        }
                    </select>
                </div>
                <div class="col-3">
                    <select id="_stringmaterialselector" class="custom-select" value="@gString.Material" @onchange="args => SelectMaterial(gString.Position, args)">
                        @foreach (var material in Materials)
                        {
                            <option value=@material>@material</option>
                        }
                    </select>
                </div>
                <div class="col-3"><label for="@gString.TensionDisplay">@gString.TensionDisplay</label></div>
            </div>
        }
        @*        <div class="row">
            @DateTime.UtcNow
            </div>*@
    }
</div>


@code {
    [Parameter]
    public int NumberOfStrings { get; set; }
    [Parameter]
    public double ScaleLength { get; set; }
    [Parameter]
    public dll.Tuning Tuning { get; set; }

    public dll.StringSet StringSet { get; set; }

    public EventCallback<dll.StringSet> StringSetChanged { get; set; }

    public List<dll.MusicalNote> Notes { get; set; }

    public List<dll.StringMaterial> Materials { get; set; }

    public List<string> PrefixDiameters{ get; set; }

    // defaults
    string[] prefixes = new string[9] { "PL", "PL", "PL", "NW", "NW", "NW", "NW", "NW", "NW" };
    double[] diameters = new double[9] { 0.010, 0.013, 0.017, 0.026, 0.036, 0.048, 0.052, 0064, 0.080 };

    //
    protected override async Task OnInitializedAsync()
    {
        //
        StringSet = new dll.StringSet(NumberOfStrings, prefixes, diameters, ScaleLength, Tuning.MusicalNotes.ToArray());
        Materials = Enum.GetValues<dll.MaterialType>().Select(_m => new dll.StringMaterial(_m)).ToList();
        PrefixDiameters = dll.UnitWeightRepo.Repository.Select(_s => _s.FullName).ToList();
        Notes = await GetNotesAsync();
        await Task.Delay(500);
    }
    protected override async Task OnParametersSetAsync()
    {
        //
        StringSet = new dll.StringSet(NumberOfStrings, prefixes, diameters, ScaleLength, Tuning.MusicalNotes.ToArray());
        await Task.Delay(500);
    }

    private async Task<List<dll.MusicalNote>> GetNotesAsync()
    {
        List<dll.MusicalNote> tmpNotes = new List<dll.MusicalNote>();
        dll.FreqRepo freqRepo = new dll.FreqRepo();
        Task<List<dll.MusicalNote>> obTask = Task.Run(() =>
        {
            for (int idx = -5; idx <= 5; idx++)
                foreach (var n in freqRepo.BaseNoteNames)
                    tmpNotes.Add(new dll.MusicalNote(n, idx));

            return tmpNotes;
        });

        return await obTask;
    }
    async Task SelectNote(int position, ChangeEventArgs e)
    {
        dll.MusicalNote newNote = new dll.MusicalNote(e.Value?.ToString());
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        oldString.Note = newNote;
        await StringSetChanged.InvokeAsync(StringSet);
    }

    async Task SelectMaterial(int position, ChangeEventArgs e)
    {
        var materialType = GetEnumValueFromDescription<dll.MaterialType>(e.Value?.ToString());
        dll.StringMaterial newMaterial = new dll.StringMaterial(materialType);
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        oldString.Material = newMaterial;
        await StringSetChanged.InvokeAsync(StringSet);
    }
    async Task SelectPrefixDiameter(int position, ChangeEventArgs e)
    {
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        var newUW = dll.UnitWeightRepo.Repository.FirstOrDefault(_s => _s.FullName == e.Value?.ToString());
        oldString.UW = newUW;
        oldString.Diameter = newUW.StringDiameter_INCH;
        await StringSetChanged.InvokeAsync(StringSet);
    }
    

    private T GetEnumValueFromDescription<T>(string description)
    {
        var type = typeof(T);
        if (!type.IsEnum)
            throw new ArgumentException();
        FieldInfo[] fields = type.GetFields();
        var field = fields
                        .SelectMany(f => f.GetCustomAttributes(
                            typeof(DescriptionAttribute), false), (
                                f, a) => new { Field = f, Att = a })
                        .Where(a => ((DescriptionAttribute)a.Att)
                            .Description == description).SingleOrDefault();
        return field == null ? default(T) : (T)field.Field.GetRawConstantValue();
    }
}
