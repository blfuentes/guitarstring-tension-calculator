@page "/generator"

@using Calculator = Calculator.DLL
@using GuitarStringTensionCalculator.Core.Components

<h3>Generator</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-10">
            <form>
                <div class="form-group row">
                    <label for="_numberofstringsselector" class="col-2 font-weight-bold">Select number of strings: </label>
                    <select id="_numberofstringsselector" class="col-6 custom-select" @onchange=@SelectNumberOfStrings>
                        <option value=0 selected>&lt;number of strings&gt;</option>
                        @for (int idx = 6; idx <= 9; idx++)
                        {
                            <option value=@idx>@idx</option>
                        }
                    </select>
                </div>

                <div class="form-group row">
                    <label for="_scalelengthselector" class="col-2 font-weight-bold">Select scale length: </label>
                    <select id="_scalelengthselector" class="col-6 custom-select" @onchange=@SelectScaleLength>
                        <option value=0 selected>&lt;scale length&gt;</option>
                        @foreach (var scale in Calculator.ScaleLengthRepo.Scales)
                        {
                            <option value=@scale.Value>@scale.Key</option>
                        }
                    </select>
                </div>

                <div class="form-group row">
                    <label for="_tuningselector" class="col-2 font-weight-bold">Select tuning: </label>
                    @if (Tunings is null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <select id="_tuningselector" class="col-6 custom-select" value="@selectedTuning.Semitones" @onchange="@SelectTuning">
                            @foreach (var tuning in Tunings)
                            {
                                <option value="@(tuning.Semitones)">@tuning.ToString()</option>
                            }
                        </select>
                    }
                </div>
                <div class="form-group row">
                    <label for="_tuningDisplay" class="col-2 font-weight-bold">Editor: </label>
                    @if (numberofStrings == 0 || scaleLength == 0 || selectedTuning is null)
                    {
                        <p><em>Please select &lt;number of strings&gt;, &lt;scale&gt; and &lt;tuning&gt;</em></p>
                    }
                    else
                    {
                        <div class="col-10">
                            <TuningComponent NumberOfStrings="@numberofStrings" ScaleLength="@scaleLength" Tuning="@selectedTuning" />
                        </div>
                    }
                </div>
            </form>
        </div>
        @if (isDebug())
        {
            <div class="col-1">
                <div class="col-1">
                    <input id="_result_numberofstrings" @bind="numberofStrings" />
                    <input id="_result_selectedscaleLength" @bind="scaleLength" />
                    <input id="_result_selectedtuning" @bind="selectedTuning.Semitones" />
                </div>
            </div>
        }
    </div>
</div>


@code {
    //
    List<Calculator.Tuning> Tunings;
    Calculator.Tuning selectedTuning = new Calculator.Tuning();

    private bool isDebug()
    {
#if DEBUG
        return true;
#else
        return false;
#endif
    }

    protected override async Task OnInitializedAsync()
    {
        Tunings = await GetTuningsAsync();
        selectedTuning = Tunings.First(_t => _t.Semitones == 0);
    }

    //
    private async Task<List<Calculator.Tuning>> GetTuningsAsync()
    {
        List<Calculator.Tuning> tmpTunings = new List<Calculator.Tuning>();
        Task<List<Calculator.Tuning>> obTask = Task.Run(() =>
        {
            for (int idx = -11; idx <= 11; idx++)
                tmpTunings.Add(new Calculator.Tuning(idx));

            return tmpTunings;
        });

        return await obTask;
    }

    // SelectNumberOfStrings
    private int numberofStrings { get; set; }
    void SelectNumberOfStrings(ChangeEventArgs e)
    {
        int tmpValue = 0;
        if (int.TryParse((string)e.Value, out tmpValue))
            numberofStrings = tmpValue;
    }

    // SelectScaleLength
    private double scaleLength { get; set; }
    void SelectScaleLength(ChangeEventArgs e)
    {
        double tmpValue = 0;
        if (double.TryParse((string)e.Value, out tmpValue))
            scaleLength = tmpValue;
    }

    // SelectNumberOfStrings
    private int semitones { get; set; }
    void SelectTuning(ChangeEventArgs e)
    {
        int tmpValue = 0;
        if (int.TryParse((string)e.Value, out tmpValue))
        {
            selectedTuning = Tunings.FirstOrDefault(_t => _t.Semitones == tmpValue);
            semitones = tmpValue;
        }
    }
}
