@page "/generator"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components
@using Calculator = Calculator.DLL
@using GuitarStringTensionCalculator.Components
@using GuitarStringTensionCalculator.Components.Parts

<h3>Calculator</h3>

<MudSelect @bind-Value="numberOfStrings" @bind-Value:after=@AfterNumberOfStringsChanged
           Label="Number of strings" AdornmentIcon="@Icons.Material.Filled.RunCircle" AdornmentColor="Color.Primary">
    @foreach (var idx in Enumerable.Range(6, 4))
    {
        <MudSelectItem Value="@(idx.ToString())">@idx</MudSelectItem>
    }
</MudSelect>

<MudSelect @bind-Value="scaleLength" @bind-Value:after=@AfterScaleLengthChanged
           Label="Scale length" OpenIcon="@Icons.Material.Filled.Rule" AdornmentColor="Color.Secondary">
    @foreach (var scale in Calculator.ScaleLengthRepo.Scales)
    {
        <MudSelectItem Value="@(scale.Value.ToString())">@scale.Key</MudSelectItem>
    }
</MudSelect>

@if (Tunings is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudSelect @bind-Value="semitones" @bind-Value:after=@AfterSemitonesChanged
               Label="Tuning" OpenIcon="@Icons.Material.Filled.MusicNote" AdornmentColor="Color.Tertiary">
        @foreach (var tuning in Tunings)
        {
            <MudSelectItem Value="@(tuning.Semitones.ToString())">@tuning.ToString()</MudSelectItem>

        }
    </MudSelect>
}

<div class="d-flex mud-width-full align-center mt-8">
    <MudText Typo="Typo.subtitle1" Class="mr-2">Selected values: </MudText>
    <MudChip Color="Color.Primary">@(numberOfStrings?.ToString() ?? "Select number of strings")</MudChip>
    <MudChip Color="Color.Secondary">@(scaleLength?.ToString() ?? "Select scale length")</MudChip>
    <MudChip Color="Color.Tertiary">@(selectedTuning?.Name ?? "Select tuning")</MudChip>
</div>

<label for="_tuningDisplay" class="col-2 font-weight-bold">Editor: </label>
@if (string.IsNullOrWhiteSpace(numberOfStrings) || string.IsNullOrWhiteSpace(scaleLength) || string.IsNullOrWhiteSpace(semitones))
{
    <p><em>Please select &lt;number of strings&gt;, &lt;scale&gt; and &lt;tuning&gt;</em></p>
}
else
{
    <div class="col-10">
        <TuningComponent NumberOfStrings="@_numOfStrings" ScaleLength="@_scaleLength" Tuning="@selectedTuning" />
    </div>
}

@code {
    //
    List<Calculator.Tuning> Tunings;
    Calculator.Tuning selectedTuning = new Calculator.Tuning();

    protected override async Task OnInitializedAsync()
    {
        Tunings = await GetTuningsAsync();
        // selectedTuning = Tunings.First(_t => _t.Semitones == 0);
    }

    //
    private async Task<List<Calculator.Tuning>> GetTuningsAsync()
    {
        List<Calculator.Tuning> tmpTunings = new List<Calculator.Tuning>();
        Task<List<Calculator.Tuning>> obTask = Task.Run(() =>
        {
            for (int idx = -11; idx <= 11; idx++)
                tmpTunings.Add(new Calculator.Tuning(idx));

            return tmpTunings;
        });

        return await obTask;
    }

    // SelectNumberOfStrings
    private string numberOfStrings { get; set; }
    private int _numOfStrings;
    private void AfterNumberOfStringsChanged()
    {
        int tmpValue = 0;
        if (int.TryParse(numberOfStrings, out tmpValue))
            _numOfStrings = tmpValue;
    }

    // SelectScaleLength
    private string scaleLength { get; set; }
    private double _scaleLength;
    private void AfterScaleLengthChanged()
    {
        double tmpValue = 0;
        if (double.TryParse(scaleLength, out tmpValue))
            _scaleLength = tmpValue;
    }

    // SelectTuning
    private string semitones { get; set; }
    private int _semitones;
    private void AfterSemitonesChanged()
    {
        int tmpValue = 0;
        if (int.TryParse(semitones, out tmpValue))
        {
            selectedTuning = Tunings.FirstOrDefault(_t => _t.Semitones == tmpValue);
            _semitones = tmpValue;
        }
    }
}
