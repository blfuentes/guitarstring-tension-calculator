@using System.Reflection;
@using System.ComponentModel;
@using Calculator.DLL
@using Calculator = Calculator.DLL
@using System.Threading.Tasks

@rendermode InteractiveServer


<div class="container">
    @if (StringSet is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-2"><span style="font-weight:bold;">Note</span></div>
            <div class="col-2"><span style="font-weight:bold;">Scale ("/mm)</span></div>
            <div class="col-2"><span style="font-weight:bold" class="bi bi-slash-circle">Type</span></div>
            <div class="col-2"><span style="font-weight:bold;">Tension</span></div>
        </div>

        foreach (var gString in StringSet.StringCollection)
        {
            <div class="row">
                <div class="col-2">
                    <MudSelect id="_stringnoteselector" T="string" Value="@gString.Note.FullName" Text="@gString.Note.FullName"
                               ValueChanged="@(note=>SelectNote(gString.Position, note))">
                        @foreach (var note in Notes)
                        {
                            <MudSelectItem Value="@(note.FullName)">@note.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-2">
                    <MudNumericField T="double" id="_stringlengthinch" Value="@gString.Length_INCH" Label="@($"{Math.Round(@gString.Length_MM, 0)}mm")"
                                     ValueChanged="@(scaleLength => SetStringLength(gString.Position, scaleLength))" />
                </div>
                <div class="col-2">
                    <MudSelect id="_prefixdiameterselector" T="string" Value="@gString.UW.FullName" Text="@gString.UW.FullName"
                               ValueChanged="@(diameter => SelectPrefixDiameter(gString.Position, diameter))">
                        @foreach (var pd in PrefixDiameters)
                        {
                            <MudSelectItem Value="@(pd)">@pd</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-2">
                    <MudField id="_stringtensiondisplay" Label="@gString.TensionDisplay" />
                </div>
            </div>
        }

        <div class="row">
            <DisplayChartComponent StringSet="@StringSet" />
        </div>
    }
</div>


@code {
    [Parameter]
    public int NumberOfStrings { get; set; }
    [Parameter]
    public double ScaleLength { get; set; }
    [Parameter]
    public Calculator.Tuning Tuning { get; set; }

    public Calculator.StringSet StringSet { get; set; }

    public EventCallback<Calculator.StringSet> StringSetChanged { get; set; }

    public List<Calculator.MusicalNote> Notes { get; set; }

    public List<Calculator.StringMaterial> Materials { get; set; }

    public List<string> PrefixDiameters { get; set; }

    // defaults
    string[] prefixes = new string[9] { "PL", "PL", "PL", "NW", "NW", "NW", "NW", "NW", "NW" };
    double[] diameters = new double[9] { 0.010, 0.013, 0.017, 0.026, 0.036, 0.048, 0.052, 0.064, 0.080 };

    //
    protected override async Task OnInitializedAsync()
    {
        //
        Notes = await GetNotesAsync();
        StringSet = new Calculator.StringSet(NumberOfStrings, prefixes, diameters, ScaleLength, Tuning.MusicalNotes.ToArray());
        Materials = Enum.GetValues<Calculator.MaterialType>().Select(_m => new Calculator.StringMaterial(_m)).ToList();
        PrefixDiameters = Calculator.UnitWeightRepo.Repository.Select(_s => _s.FullName).ToList();
        await Task.Delay(500);
    }
    protected override async Task OnParametersSetAsync()
    {
        //
        StringSet = new Calculator.StringSet(NumberOfStrings, prefixes, diameters, ScaleLength, Tuning.MusicalNotes.ToArray());
        await Task.Delay(500);
    }

    private async Task<List<Calculator.MusicalNote>> GetNotesAsync()
    {
        List<Calculator.MusicalNote> tmpNotes = new List<Calculator.MusicalNote>();
        Calculator.FreqRepo freqRepo = new Calculator.FreqRepo();
        Task<List<Calculator.MusicalNote>> obTask = Task.Run(() =>
        {
            for (int idx = -5; idx <= 5; idx++)
                foreach (var n in freqRepo.BaseNoteNames)
                    tmpNotes.Add(new Calculator.MusicalNote(n, idx));

            return tmpNotes;
        });

        return await obTask;
    }

    async Task SelectNote(int position, string noteValue)
    {
        Calculator.MusicalNote newNote = new Calculator.MusicalNote(noteValue);
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        oldString.Note = newNote;
        await StringSetChanged.InvokeAsync(StringSet);
    }

    async Task SelectPrefixDiameter(int position, string value)
    {
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        var newUW = Calculator.UnitWeightRepo.Repository.FirstOrDefault(_s => _s.FullName == value);
        oldString.UW = newUW;
        oldString.Diameter = newUW.StringDiameter_INCH;
        await StringSetChanged.InvokeAsync(StringSet);
    }

    async Task SetStringLength(int position, double value)
    {
        var oldString = StringSet.StringCollection.First(_n => _n.Position == position);
        oldString.Length_INCH = value;
        await StringSetChanged.InvokeAsync(StringSet);
    }

    private T GetEnumValueFromDescription<T>(string description)
    {
        var type = typeof(T);
        if (!type.IsEnum)
            throw new ArgumentException();
        FieldInfo[] fields = type.GetFields();
        var field = fields
            .SelectMany(f => f.GetCustomAttributes(typeof(DescriptionAttribute), false), (f, a) => new { Field = f, Att = a })
            .Where(a => ((DescriptionAttribute)a.Att)
            .Description == description).SingleOrDefault();
        return field == null ? default(T) : (T)field.Field.GetRawConstantValue();
    }
}
